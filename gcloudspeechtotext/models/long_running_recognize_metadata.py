# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models. <br> **PLEASE NOTE**: This API is provided by Google, beside the documentation provide below, you can find Google API documentation [here](https://cloud.google.com/speech-to-text/docs/reference/rest). You can refer to the Google documentation as well except by the URLs needed to call the API and that are documented here below.  # noqa: E501

    OpenAPI spec version: v3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LongRunningRecognizeMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'str',
        'last_update_time': 'str',
        'progress_percent': 'int'
    }

    attribute_map = {
        'start_time': 'startTime',
        'last_update_time': 'lastUpdateTime',
        'progress_percent': 'progressPercent'
    }

    def __init__(self, start_time=None, last_update_time=None, progress_percent=None):  # noqa: E501
        """LongRunningRecognizeMetadata - a model defined in Swagger"""  # noqa: E501
        self._start_time = None
        self._last_update_time = None
        self._progress_percent = None
        self.discriminator = None
        if start_time is not None:
            self.start_time = start_time
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if progress_percent is not None:
            self.progress_percent = progress_percent

    @property
    def start_time(self):
        """Gets the start_time of this LongRunningRecognizeMetadata.  # noqa: E501

        Time when the request was received.  # noqa: E501

        :return: The start_time of this LongRunningRecognizeMetadata.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LongRunningRecognizeMetadata.

        Time when the request was received.  # noqa: E501

        :param start_time: The start_time of this LongRunningRecognizeMetadata.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this LongRunningRecognizeMetadata.  # noqa: E501

        Time of the most recent processing update.  # noqa: E501

        :return: The last_update_time of this LongRunningRecognizeMetadata.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this LongRunningRecognizeMetadata.

        Time of the most recent processing update.  # noqa: E501

        :param last_update_time: The last_update_time of this LongRunningRecognizeMetadata.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    @property
    def progress_percent(self):
        """Gets the progress_percent of this LongRunningRecognizeMetadata.  # noqa: E501

        Approximate percentage of audio processed thus far. Guaranteed to be 100 when the audio is fully processed and the results are available.  # noqa: E501

        :return: The progress_percent of this LongRunningRecognizeMetadata.  # noqa: E501
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this LongRunningRecognizeMetadata.

        Approximate percentage of audio processed thus far. Guaranteed to be 100 when the audio is fully processed and the results are available.  # noqa: E501

        :param progress_percent: The progress_percent of this LongRunningRecognizeMetadata.  # noqa: E501
        :type: int
        """

        self._progress_percent = progress_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LongRunningRecognizeMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LongRunningRecognizeMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
