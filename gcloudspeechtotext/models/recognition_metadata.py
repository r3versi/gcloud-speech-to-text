# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models. <br> **PLEASE NOTE**: This API is provided by Google, beside the documentation provide below, you can find Google API documentation [here](https://cloud.google.com/speech-to-text/docs/reference/rest). You can refer to the Google documentation as well except by the URLs needed to call the API and that are documented here below.  # noqa: E501

    OpenAPI spec version: v3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RecognitionMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_media_type': 'str',
        'recording_device_type': 'str',
        'interaction_type': 'str',
        'recording_device_name': 'str',
        'audio_topic': 'str',
        'original_mime_type': 'str',
        'microphone_distance': 'str',
        'industry_naics_code_of_audio': 'int'
    }

    attribute_map = {
        'original_media_type': 'originalMediaType',
        'recording_device_type': 'recordingDeviceType',
        'interaction_type': 'interactionType',
        'recording_device_name': 'recordingDeviceName',
        'audio_topic': 'audioTopic',
        'original_mime_type': 'originalMimeType',
        'microphone_distance': 'microphoneDistance',
        'industry_naics_code_of_audio': 'industryNaicsCodeOfAudio'
    }

    def __init__(self, original_media_type=None, recording_device_type=None, interaction_type=None, recording_device_name=None, audio_topic=None, original_mime_type=None, microphone_distance=None, industry_naics_code_of_audio=None):  # noqa: E501
        """RecognitionMetadata - a model defined in Swagger"""  # noqa: E501
        self._original_media_type = None
        self._recording_device_type = None
        self._interaction_type = None
        self._recording_device_name = None
        self._audio_topic = None
        self._original_mime_type = None
        self._microphone_distance = None
        self._industry_naics_code_of_audio = None
        self.discriminator = None
        if original_media_type is not None:
            self.original_media_type = original_media_type
        if recording_device_type is not None:
            self.recording_device_type = recording_device_type
        if interaction_type is not None:
            self.interaction_type = interaction_type
        if recording_device_name is not None:
            self.recording_device_name = recording_device_name
        if audio_topic is not None:
            self.audio_topic = audio_topic
        if original_mime_type is not None:
            self.original_mime_type = original_mime_type
        if microphone_distance is not None:
            self.microphone_distance = microphone_distance
        if industry_naics_code_of_audio is not None:
            self.industry_naics_code_of_audio = industry_naics_code_of_audio

    @property
    def original_media_type(self):
        """Gets the original_media_type of this RecognitionMetadata.  # noqa: E501

        The original media the speech was recorded on.  # noqa: E501

        :return: The original_media_type of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._original_media_type

    @original_media_type.setter
    def original_media_type(self, original_media_type):
        """Sets the original_media_type of this RecognitionMetadata.

        The original media the speech was recorded on.  # noqa: E501

        :param original_media_type: The original_media_type of this RecognitionMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["ORIGINAL_MEDIA_TYPE_UNSPECIFIED", "AUDIO", "VIDEO"]  # noqa: E501
        if original_media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `original_media_type` ({0}), must be one of {1}"  # noqa: E501
                .format(original_media_type, allowed_values)
            )

        self._original_media_type = original_media_type

    @property
    def recording_device_type(self):
        """Gets the recording_device_type of this RecognitionMetadata.  # noqa: E501

        The type of device the speech was recorded with.  # noqa: E501

        :return: The recording_device_type of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._recording_device_type

    @recording_device_type.setter
    def recording_device_type(self, recording_device_type):
        """Sets the recording_device_type of this RecognitionMetadata.

        The type of device the speech was recorded with.  # noqa: E501

        :param recording_device_type: The recording_device_type of this RecognitionMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["RECORDING_DEVICE_TYPE_UNSPECIFIED", "SMARTPHONE", "PC", "PHONE_LINE", "VEHICLE", "OTHER_OUTDOOR_DEVICE", "OTHER_INDOOR_DEVICE"]  # noqa: E501
        if recording_device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recording_device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recording_device_type, allowed_values)
            )

        self._recording_device_type = recording_device_type

    @property
    def interaction_type(self):
        """Gets the interaction_type of this RecognitionMetadata.  # noqa: E501

        The use case most closely describing the audio content to be recognized.  # noqa: E501

        :return: The interaction_type of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """Sets the interaction_type of this RecognitionMetadata.

        The use case most closely describing the audio content to be recognized.  # noqa: E501

        :param interaction_type: The interaction_type of this RecognitionMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERACTION_TYPE_UNSPECIFIED", "DISCUSSION", "PRESENTATION", "PHONE_CALL", "VOICEMAIL", "PROFESSIONALLY_PRODUCED", "VOICE_SEARCH", "VOICE_COMMAND", "DICTATION"]  # noqa: E501
        if interaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(interaction_type, allowed_values)
            )

        self._interaction_type = interaction_type

    @property
    def recording_device_name(self):
        """Gets the recording_device_name of this RecognitionMetadata.  # noqa: E501

        The device used to make the recording.  Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.  # noqa: E501

        :return: The recording_device_name of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._recording_device_name

    @recording_device_name.setter
    def recording_device_name(self, recording_device_name):
        """Sets the recording_device_name of this RecognitionMetadata.

        The device used to make the recording.  Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.  # noqa: E501

        :param recording_device_name: The recording_device_name of this RecognitionMetadata.  # noqa: E501
        :type: str
        """

        self._recording_device_name = recording_device_name

    @property
    def audio_topic(self):
        """Gets the audio_topic of this RecognitionMetadata.  # noqa: E501

        Description of the content. Eg. \"Recordings of federal supreme court hearings from 2012\".  # noqa: E501

        :return: The audio_topic of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._audio_topic

    @audio_topic.setter
    def audio_topic(self, audio_topic):
        """Sets the audio_topic of this RecognitionMetadata.

        Description of the content. Eg. \"Recordings of federal supreme court hearings from 2012\".  # noqa: E501

        :param audio_topic: The audio_topic of this RecognitionMetadata.  # noqa: E501
        :type: str
        """

        self._audio_topic = audio_topic

    @property
    def original_mime_type(self):
        """Gets the original_mime_type of this RecognitionMetadata.  # noqa: E501

        Mime type of the original audio file.  For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio  # noqa: E501

        :return: The original_mime_type of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._original_mime_type

    @original_mime_type.setter
    def original_mime_type(self, original_mime_type):
        """Sets the original_mime_type of this RecognitionMetadata.

        Mime type of the original audio file.  For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio  # noqa: E501

        :param original_mime_type: The original_mime_type of this RecognitionMetadata.  # noqa: E501
        :type: str
        """

        self._original_mime_type = original_mime_type

    @property
    def microphone_distance(self):
        """Gets the microphone_distance of this RecognitionMetadata.  # noqa: E501

        The audio type that most closely describes the audio being recognized.  # noqa: E501

        :return: The microphone_distance of this RecognitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._microphone_distance

    @microphone_distance.setter
    def microphone_distance(self, microphone_distance):
        """Sets the microphone_distance of this RecognitionMetadata.

        The audio type that most closely describes the audio being recognized.  # noqa: E501

        :param microphone_distance: The microphone_distance of this RecognitionMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["MICROPHONE_DISTANCE_UNSPECIFIED", "NEARFIELD", "MIDFIELD", "FARFIELD"]  # noqa: E501
        if microphone_distance not in allowed_values:
            raise ValueError(
                "Invalid value for `microphone_distance` ({0}), must be one of {1}"  # noqa: E501
                .format(microphone_distance, allowed_values)
            )

        self._microphone_distance = microphone_distance

    @property
    def industry_naics_code_of_audio(self):
        """Gets the industry_naics_code_of_audio of this RecognitionMetadata.  # noqa: E501

        The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio.  Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.  # noqa: E501

        :return: The industry_naics_code_of_audio of this RecognitionMetadata.  # noqa: E501
        :rtype: int
        """
        return self._industry_naics_code_of_audio

    @industry_naics_code_of_audio.setter
    def industry_naics_code_of_audio(self, industry_naics_code_of_audio):
        """Sets the industry_naics_code_of_audio of this RecognitionMetadata.

        The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio.  Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.  # noqa: E501

        :param industry_naics_code_of_audio: The industry_naics_code_of_audio of this RecognitionMetadata.  # noqa: E501
        :type: int
        """

        self._industry_naics_code_of_audio = industry_naics_code_of_audio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecognitionMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecognitionMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
