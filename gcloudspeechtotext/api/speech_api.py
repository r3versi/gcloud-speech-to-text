# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models. <br> **PLEASE NOTE**: This API is provided by Google, beside the documentation provide below, you can find Google API documentation [here](https://cloud.google.com/speech-to-text/docs/reference/rest). You can refer to the Google documentation as well except by the URLs needed to call the API and that are documented here below.  # noqa: E501

    OpenAPI spec version: v3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gcloudspeechtotext.api_client import ApiClient


class SpeechApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def speech_speech_longrunningrecognize(self, **kwargs):  # noqa: E501
        """speech_speech_longrunningrecognize  # noqa: E501

        Performs asynchronous speech recognition: receive results via the google.longrunning.Operations interface. Returns either an `Operation.error` or an `Operation.response` which contains a `LongRunningRecognizeResponse` message. For more information on asynchronous speech recognition, see the [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.speech_speech_longrunningrecognize(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LongRunningRecognizeRequest body:
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str xgafv: V1 error format.
        :param str param_callback: JSONP
        :param str alt: Data format for response.
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.speech_speech_longrunningrecognize_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.speech_speech_longrunningrecognize_with_http_info(**kwargs)  # noqa: E501
            return data

    def speech_speech_longrunningrecognize_with_http_info(self, **kwargs):  # noqa: E501
        """speech_speech_longrunningrecognize  # noqa: E501

        Performs asynchronous speech recognition: receive results via the google.longrunning.Operations interface. Returns either an `Operation.error` or an `Operation.response` which contains a `LongRunningRecognizeResponse` message. For more information on asynchronous speech recognition, see the [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.speech_speech_longrunningrecognize_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LongRunningRecognizeRequest body:
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str xgafv: V1 error format.
        :param str param_callback: JSONP
        :param str alt: Data format for response.
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fields', 'upload_type', 'xgafv', 'param_callback', 'alt', 'upload_protocol', 'pretty_print', 'quota_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method speech_speech_longrunningrecognize" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'upload_type' in params:
            query_params.append(('uploadType', params['upload_type']))  # noqa: E501
        if 'xgafv' in params:
            query_params.append(('$.xgafv', params['xgafv']))  # noqa: E501
        if 'param_callback' in params:
            query_params.append(('callback', params['param_callback']))  # noqa: E501
        if 'alt' in params:
            query_params.append(('alt', params['alt']))  # noqa: E501
        if 'upload_protocol' in params:
            query_params.append(('upload_protocol', params['upload_protocol']))  # noqa: E501
        if 'pretty_print' in params:
            query_params.append(('prettyPrint', params['pretty_print']))  # noqa: E501
        if 'quota_user' in params:
            query_params.append(('quotaUser', params['quota_user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/speech:longrunningrecognize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
